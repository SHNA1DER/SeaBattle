from tkinter import *
from tkinter import messagebox
import time
import random

tk = Tk()
app_running = True
size_of_field_x = 650
size_of_field_y = 550
size_x = size_y = 10
move_x = size_of_field_x // size_x  # —à–∞–≥ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
move_y = size_of_field_y // size_y  # —à–∞–≥ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
# –∫–æ—Ä—Ä–µ–∫—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤–∞—Ñ–µ–ª—å–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è
size_of_field_x = move_x * size_x
size_of_field_y = move_y * size_y
size_font_x = 10
len_txt_x = 14*size_font_x
delta_otl_info_x = len_txt_x // move_x + 1
otl_info_x = move_x * delta_otl_info_x

otl_info_y = 40
ships = size_x // 2  # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–æ—Ä–∞–±–ª–µ–π
ship_len1 = size_x // 5  # –¥–ª–∏–Ω–∞ –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–ø–∞ –∫–æ—Ä–∞–±–ª—è
ship_len2 = size_x // 4  # –¥–ª–∏–Ω–∞ –≤—Ç–æ—Ä–æ–≥–æ —Ç–∏–ø–∞ –∫–æ—Ä–∞–±–ª—è
ship_len3 = size_x // 3  # –¥–ª–∏–Ω–∞ –≤—Ç–æ—Ä–æ–≥–æ —Ç–∏–ø–∞ –∫–æ—Ä–∞–±–ª—è
ship_len4 = size_x // 2  # –¥–ª–∏–Ω–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ —Ç–∏–ø–∞ –∫–æ—Ä–∞–±–ª—è
enemy_ships1 = [[0 for i in range(size_x + 1)] for i in range(size_y + 1)]
enemy_ships2 = [[0 for i in range(size_x + 1)] for i in range(size_y + 1)]
list_ids = []  # —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ canvas
# points1 - —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –≤ –∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–∫–Ω—É–ª–∏ –º—ã—à–∫–æ–π
points1 = [[-1 for i in range(size_x)] for i in range(size_y)]
points2 = [[-1 for i in range(size_x)] for i in range(size_y)]
# hit - —Å–ø–∏—Å–æ–∫ –ø–æ–ø–∞–¥–∞–Ω–∏–π –ø–æ –∫–æ—Ä–∞–±–ª—è–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
hit = [[0 for i in range(size_x)] for i in range(size_y)]
# ships_list - —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∞–±–ª–µ–π –∏–≥—Ä–æ–∫–∞ 1 –∏ –∏–≥—Ä–æ–∫–∞ 2
ships_list = []
# hod_igrovomu_polu_1 - –µ—Å–ª–∏ –ò—Å—Ç–∏–Ω–∞ - —Ç–æ —Ö–æ–¥–∏—Ç Admiral No. 2, –∏–Ω–∞—á–µ —Ö–æ–¥–∏—Ç Admiral No. 1
hod_igrovomu_polu_1 = False
add_to_label = ""
add_to_label2 = ""


def on_closing():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –û–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã. 
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã—Ö–æ–¥, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.

    :return: None
    """
    global app_running
    if messagebox.askokcancel("exiting the game", "Do you want to quit the game??"):
        app_running = False
        tk.destroy()


tk.protocol("WM_DELETE_WINDOW", on_closing)
tk.title("Naval battle")
tk.resizable(0, 0)
tk.wm_attributes("-topmost", 1)
canvas = Canvas(tk, width=size_of_field_x + otl_info_x + size_of_field_x, height=size_of_field_y + otl_info_y, bd=0,
                highlightthickness=0)
canvas.create_rectangle(0, 0, size_of_field_x,
                        size_of_field_y, fill="SteelBlue1")
canvas.create_rectangle(size_of_field_x + otl_info_x, 0, size_of_field_x + otl_info_x + size_of_field_x, size_of_field_y,
                        fill="SteelBlue2")
canvas.pack()
tk.update()


def draw_table(offset_x=0):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.

    –†–∏—Å—É–µ—Ç —Å–µ—Ç–∫—É –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º –ø–æ –æ—Å–∏ X.

    :param int offset_x: –°–º–µ—â–µ–Ω–∏–µ –ø–æ –æ—Å–∏ X (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
    :return: None
    """
    for i in range(0, size_x + 1):
        canvas.create_line(offset_x + move_x * i, 0,
                           offset_x + move_x * i, size_of_field_y)
    for i in range(0, size_y + 1):
        canvas.create_line(offset_x, move_y * i, offset_x +
                           size_of_field_x, move_y * i)


draw_table()
draw_table(size_of_field_x + otl_info_x)

t0 = Label(tk, text="Admiral No. 1", font=("Times New Roman", 16))
t0.place(x=size_of_field_x // 2 - t0.winfo_reqwidth() //
         2, y=size_of_field_y + 3)
t1 = Label(tk, text="Admiral No. 2", font=("Times New Roman", 16))
t1.place(x=size_of_field_x + otl_info_x + size_of_field_x //
         2 - t1.winfo_reqwidth() // 2, y=size_of_field_y + 3)

t0.configure(bg="tomato")
t0.configure(bg="#f0f0f0")

t3 = Label(tk, text="@@@@@@@", font=("Times New Roman", 16))
t3.place(x=size_of_field_x + otl_info_x//2 -
         t3.winfo_reqwidth() // 2, y=size_of_field_y)


def mark_igrok(igrok_mark_1):
    """–ú–∞—Ä–∫–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞.

    –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω—è–µ—Ç –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –º–µ—Ç–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, 
    —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥. –ï—Å–ª–∏ `igrok_mark_1` —Ä–∞–≤–µ–Ω `True`, 
    —Ç–æ –º–µ—Ç–∫–∞ `t0` –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç—Å—è –æ—Ä–∞–Ω–∂–µ–≤—ã–º —Ü–≤–µ—Ç–æ–º,
    –∞ –º–µ—Ç–∫–∞ `t1` —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–µ—Ä–æ–≥–æ —Ü–≤–µ—Ç–∞. –ï—Å–ª–∏ `False`, —Ç–æ –Ω–∞–æ–±–æ—Ä–æ—Ç.
    :param bool igrok_mark_1: –§–ª–∞–≥, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥
    :return: None
    """
    if igrok_mark_1:
        t0.configure(bg="orange")
        t0.configure(text="Admiral No. 1"+add_to_label2)
        t0.place(x=size_of_field_x // 2 - t0.winfo_reqwidth() //
                 2, y=size_of_field_y + 3)
        t1.configure(text="Admiral No. 2" + add_to_label)
        t1.place(x=size_of_field_x + otl_info_x + size_of_field_x //
                 2 - t1.winfo_reqwidth() // 2, y=size_of_field_y + 3)
        t1.configure(bg="#f0f0f0")
        t3.configure(text="Move Admiral No. 2"+add_to_label)
        t3.place(x=size_of_field_x + otl_info_x // 2 -
                 t3.winfo_reqwidth() // 2, y=size_of_field_y)
    else:
        t1.configure(bg="orange")
        t0.configure(bg="#f0f0f0")
        t0.configure(text="Admiral No. 1")
        t0.place(x=size_of_field_x // 2 - t0.winfo_reqwidth() //
                 2, y=size_of_field_y + 3)
        t1.configure(text="Admiral No. 2" + add_to_label)
        t1.place(x=size_of_field_x + otl_info_x + size_of_field_x //
                 2 - t1.winfo_reqwidth() // 2, y=size_of_field_y + 3)
        t3.configure(text="Move Admiral No. 1")
        t3.place(x=size_of_field_x + otl_info_x // 2 -
                 t3.winfo_reqwidth() // 2, y=size_of_field_y)


mark_igrok(hod_igrovomu_polu_1)


def button_show_enemy1():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∞–±–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞.

    –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.

    :return: None
    """
    for i in range(0, size_x):
        for j in range(0, size_y):
            if enemy_ships1[j][i] > 0:
                color = "orange"
                _id = canvas.create_rectangle(i * move_x, j * move_y, i * move_x + move_x, j * move_y + move_y,
                                              fill=color)
                list_ids.append(_id)


def button_show_enemy2():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∞–±–ª–∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞.

    –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.

    :return: None
    """
    for i in range(0, size_x):
        for j in range(0, size_y):
            if enemy_ships2[j][i] > 0:
                color = "orange"
                id = canvas.create_rectangle(size_of_field_x + otl_info_x + i * move_x, j * move_y,
                                             size_of_field_x + otl_info_x + i * move_x + move_x, j * move_y + move_y,
                                             fill=color)
                list_ids.append(id)


def button_begin_again():
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã.

    –§—É–Ω–∫—Ü–∏—è –æ—á–∏—â–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –∫–æ—Ä–∞–±–ª–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏.

    :return: None
    """
    global list_ids
    global points1, points2
    global hit
    global enemy_ships1, enemy_ships2

    for el in list_ids:
        canvas.delete(el)
    list_ids = []
    generate_ships_list()
    enemy_ships1 = generate_enemy_ships()
    enemy_ships2 = generate_enemy_ships()
    points1 = [[-1 for i in range(size_x)] for i in range(size_y)]
    points2 = [[-1 for i in range(size_x)] for i in range(size_y)]
    hit = [[0 for i in range(size_x)]
           for i in range(size_y)]  # –°–±—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–π


knpk0 = Button(tk, text="show the ships \n Admiral No. 1",
               command=button_show_enemy1)
knpk0.place(x=size_of_field_x + otl_info_x //
            2 - knpk0.winfo_reqwidth() // 2, y=10)

knpk1 = Button(tk, text="show the ships \n Admiral No. 2",
               command=button_show_enemy2)
knpk1.place(x=size_of_field_x + otl_info_x //
            2 - knpk1.winfo_reqwidth() // 2, y=60)

knpk2 = Button(tk, text="start again", command=button_begin_again)
knpk2.place(x=size_of_field_x + otl_info_x // 2 -
            knpk2.winfo_reqwidth() // 2, y=110)


def draw_point(x, y):
    """–†–∏—Å—É–µ—Ç —Å–∏–º–≤–æ–ª –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤–µ `enemy_ships1`.

    –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤–µ `enemy_ships1` —Ä–∞–≤–Ω–æ 0, —Ç–æ —Ä–∏—Å—É–µ—Ç —ç–º–æ–¥–∑–∏ "üåÄ". –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ 0, —Ç–æ —Ä–∏—Å—É–µ—Ç —ç–º–æ–¥–∑–∏ "üí•".

    :param int x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X.
    :param int y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y.
    :return: None
    """
    if enemy_ships1[y][x] == 0:
        color = "lightcyan"
        elem1 = canvas.create_text(x * move_x + move_x // 2, y * move_y + move_y // 2,
                                   text='üåÄ', font=(60, 60), fill=color)

        list_ids.append(elem1)

    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ 0, —Ç–æ —Ä–∏—Å—É–µ–º —ç–º–æ–¥–∑–∏ üí•
    elif enemy_ships1[y][x] > 0:
        color = "white"
        elem1 = canvas.create_text(x * move_x + move_x // 2, y * move_y + move_y // 2,
                                   text='üí•', font=(80, 80), fill=color)
        color1 = "orange"
        elem2 = canvas.create_text(x * move_x + move_x // 2, y * move_y + move_y // 2,
                                   text='üí•', font=(60, 60), fill=color1)
        color2 = "red"
        elem3 = canvas.create_text(x * move_x + move_x // 2, y * move_y + move_y // 2,
                                   text='üí•', font=(35, 35), fill=color2)

        list_ids.append(elem1, elem2, elem3)


def draw_point2(x, y, offset_x=size_of_field_x + otl_info_x):
    """–†–∏—Å—É–µ—Ç —Å–∏–º–≤–æ–ª –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤–µ `enemy_ships2`.

    –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤–µ `enemy_ships2` —Ä–∞–≤–Ω–æ 0, —Ç–æ —Ä–∏—Å—É–µ—Ç —ç–º–æ–¥–∑–∏ "üåÄ". –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ 0, —Ç–æ —Ä–∏—Å—É–µ—Ç —ç–º–æ–¥–∑–∏ "üí•".

    :param int x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X.
    :param int y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y.
    :param int offset_x: –°–º–µ—â–µ–Ω–∏–µ –ø–æ –æ—Å–∏ X.
    :return: None
    """
    if enemy_ships2[y][x] == 0:
        color = "lightcyan"
        elem1 = canvas.create_text(offset_x + x * move_x + move_x // 2, y * move_y + move_y // 2,
                                   text='üåÄ', font=(60, 60), fill=color)
        list_ids.append(elem1)

    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ 0, —Ç–æ —Ä–∏—Å—É–µ–º —ç–º–æ–¥–∑–∏ üí•
    elif enemy_ships2[y][x] > 0:
        color = "white"
        elem1 = canvas.create_text(offset_x + x * move_x + move_x // 2, y * move_y + move_y // 2,
                                   text='üí•', font=(80, 80), fill=color)
        color1 = "orange"
        elem2 = canvas.create_text(offset_x + x * move_x + move_x // 2, y * move_y + move_y // 2,
                                   text='üí•', font=(60, 60), fill=color1)
        color2 = "red"
        elem3 = canvas.create_text(offset_x + x * move_x + move_x // 2, y * move_y + move_y // 2,
                                   text='üí•', font=(35, 35), fill=color2)
        list_ids.append(elem1, elem2, elem3)


def check_winner(x, y):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫.

    –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤–µ `enemy_ships1` –±–æ–ª—å—à–µ –Ω—É–ª—è, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –º–∞—Å—Å–∏–≤ `hit` –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞ `enemy_ships1`.

    –ó–∞—Ç–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—É–º–º—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ `enemy_ships1` —Å —Å—É–º–º–æ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ `hit`. –ï—Å–ª–∏ —Å—É–º–º—ã —Ä–∞–≤–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª.

    :param int x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X.
    :param int y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y.
    :return: –õ–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫.
    """
    win = False
    if enemy_ships1[y][x] > 0:
        hit[y][x] = enemy_ships1[y][x]
    sum_enemy_ships1 = sum(sum(i) for i in zip(*enemy_ships1))
    sum_hit = sum(sum(i) for i in zip(*hit))
    if sum_enemy_ships1 == sum_hit:
        win = True
    return win


def check_winner2():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ (–∏–≥—Ä–æ–∫ ‚Ññ2).

    –ü—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ `enemy_ships2`, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ -1). –ï—Å–ª–∏ —Ç–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `False`, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª. –ï—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª.

    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã**:
     - `i` –∏ `j` ‚Äî –∏–Ω–¥–µ–∫—Å—ã –≤ –¥–≤—É–º–µ—Ä–Ω–æ–π –º–∞—Ç—Ä–∏—Ü–µ `enemy_ships2`, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –ø–æ –æ—Å—è–º `x` –∏ `y`.

    **–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è**:
      - `win` ‚Äî –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ç–∞—Ç—É—Å –ø–æ–±–µ–¥—ã –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞. –ï—Å–ª–∏ `win` —Ä–∞–≤–Ω–æ `True`, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª. –ï—Å–ª–∏ `win` —Ä–∞–≤–Ω–æ `False`, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª.
    """
    win = True
    for i in range(0, size_x):
        for j in range(0, size_y):
            if enemy_ships1[j][i] > 0:
                if points1[j][i] == -1:
                    win = False
    return win


def check_winner2_igrok_2():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ (–∏–≥—Ä–æ–∫ ‚Ññ2).

    –ü—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ `enemy_ships2`, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ -1). –ï—Å–ª–∏ —Ç–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `False`, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª. –ï—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª.

    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã**:
     - `i` –∏ `j` ‚Äî –∏–Ω–¥–µ–∫—Å—ã –≤ –¥–≤—É–º–µ—Ä–Ω–æ–π –º–∞—Ç—Ä–∏—Ü–µ `enemy_ships2`, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –ø–æ –æ—Å—è–º `x` –∏ `y`.

    **–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è**:
      - `win` ‚Äî –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ç–∞—Ç—É—Å –ø–æ–±–µ–¥—ã –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
      """
    win = True
    for i in range(0, size_x):
        for j in range(0, size_y):
            if enemy_ships2[j][i] > 0:
                if points2[j][i] == -1:
                    win = False
    return win


def add_to_all(incident):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã—Å—Ç—Ä–µ–ª—ã –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é. 

    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤—ã—Å—Ç—Ä–µ–ª–∞ (–ª–µ–≤–∞—è –∏–ª–∏ –ø—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏) 
    –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é. 
    –ï—Å–ª–∏ –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã, –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∏ –∏–≥—Ä–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è. 

    :param incident: –°–æ–±—ã—Ç–∏–µ –≤—ã—Å—Ç—Ä–µ–ª–∞ (–ª–µ–≤–∞—è –∏–ª–∏ –ø—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏). 
    """
    global points1, points2, hod_igrovomu_polu_1
    _type = 0  # –õ–ö–ú
    if incident.num == 3:
        _type = 1  # –ü–ö–ú
    mouse_x = canvas.winfo_pointerx() - canvas.winfo_rootx()
    mouse_y = canvas.winfo_pointery() - canvas.winfo_rooty()
    ip_x = mouse_x // move_x
    ip_y = mouse_y // move_y

    if ip_x < size_x and ip_y < size_y and hod_igrovomu_polu_1:
        if points1[ip_y][ip_x] == -1:
            points1[ip_y][ip_x] = _type
            hod_igrovomu_polu_1 = False
            draw_point(ip_x, ip_y)

            if check_winner2():
                hod_igrovomu_polu_1 = True
                winner = "Admiral's victory No. 2"
                winner_add = "All ships of the opponent of Player No. 1 are hit!!!"
                print(winner, winner_add)
                points1 = [[10 for i in range(size_x)] for i in range(size_y)]
                points2 = [[10 for i in range(size_x)] for i in range(size_y)]
                elem1 = canvas.create_rectangle(move_x*3, size_of_field_y // 2, size_of_field_x + otl_info_x + size_of_field_x-move_x*3,
                                                size_of_field_y // 2+move_y+move_y // 2 + 60 + 30 + move_y // 2, fill="red")
                list_ids.append(elem1)
                elem2 = canvas.create_rectangle(move_x * 3+move_x//2, size_of_field_y // 2 + move_y//2,
                                                size_of_field_x + otl_info_x + size_of_field_x - move_x * 3 - move_x//2,
                                                size_of_field_y // 2+move_y+move_y // 2 + 60 + 30 + move_y // 2 - move_y//2, fill="white")
                list_ids.append(elem2)
                elem3 = canvas.create_text(size_of_field_x+otl_info_x//2, size_of_field_y // 2 +
                                           move_y+move_y // 2, text=winner, font=("Times New Roman", 50), justify=CENTER)
                elem4 = canvas.create_text(size_of_field_x+otl_info_x//2, size_of_field_y // 2+move_y +
                                           move_y // 2 + 50, text=winner_add, font=("Times New Roman", 25), justify=CENTER)
                list_ids.append(elem3)
                list_ids.append(elem4)

    if ip_x >= size_x + delta_otl_info_x and ip_x <= size_x + size_x + delta_otl_info_x and ip_y < size_y and not hod_igrovomu_polu_1:

        if points2[ip_y][ip_x - size_x - delta_otl_info_x] == -1:
            points2[ip_y][ip_x - size_x - delta_otl_info_x] = _type
            hod_igrovomu_polu_1 = True
            draw_point2(ip_x - size_x - delta_otl_info_x, ip_y)

            if check_winner2_igrok_2():
                hod_igrovomu_polu_1 = False
                winner = "Admiral's victory No. 1"
                winner_add = "All ships of the opponent of Player No. 2 are hit!!!"
                print(winner, winner_add)
                points1 = [[10 for i in range(size_x)] for i in range(size_y)]
                points2 = [[10 for i in range(size_x)] for i in range(size_y)]
                elem1 = canvas.create_rectangle(move_x * 3, size_of_field_y // 2,
                                                size_of_field_x + otl_info_x + size_of_field_x - move_x * 3,
                                                size_of_field_y // 2 + move_y + move_y // 2 + 60 + 30 + move_y // 2,
                                                fill="red")
                list_ids.append(elem1)
                elem2 = canvas.create_rectangle(move_x * 3 + move_x // 2, size_of_field_y // 2 + move_y // 2,
                                                size_of_field_x + otl_info_x + size_of_field_x - move_x * 3 - move_x // 2,
                                                size_of_field_y // 2 + move_y + move_y // 2 +
                                                60 + 30 + move_y // 2 - move_y // 2,
                                                fill="white")
                list_ids.append(elem2)
                elem3 = canvas.create_text(size_of_field_x + otl_info_x // 2, size_of_field_y // 2 + move_y + move_y // 2,
                                           text=winner, font=("Times New Roman", 50), justify=CENTER)
                elem4 = canvas.create_text(size_of_field_x + otl_info_x // 2, size_of_field_y // 2 + move_y + move_y // 2 + 50,
                                           text=winner_add, font=("Times New Roman", 25), justify=CENTER)
                list_ids.append(elem3)
                list_ids.append(elem4)
    mark_igrok(hod_igrovomu_polu_1)


canvas.bind_all("<Button-1>", add_to_all)  # –õ–ö–ú
canvas.bind_all("<Button-3>", add_to_all)  # –ü–ö–ú


def generate_ships_list():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–ª–∏–Ω –∫–æ—Ä–∞–±–ª–µ–π. 

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –¥–ª–∏–Ω—É –∫–æ—Ä–∞–±–ª–µ–π. 
    –î–ª–∏–Ω–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. 

    :return: None 

    """
    global ships_list
    ships_list = []
    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–ª–∏–Ω –∫–æ—Ä–∞–±–ª–µ–π
    for i in range(0, ships):
        ships_list.append(random.choice(
            [ship_len1, ship_len2, ship_len3, ship_len4]))


def generate_enemy_ships():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. 

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—ã—Ç–∞–µ—Ç—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–∞ –ø–æ–ª–µ. 
    –ï—Å–ª–∏ —Å—É–º–º–∞ –≤—Å–µ—Ö –µ–¥–∏–Ω–∏—Ü (–ø–æ–¥–±–∏—Ç—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π) —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–±—â–µ–π —Å—É–º–º–æ–π –¥–ª–∏–Ω –∫–æ—Ä–∞–±–ª–µ–π, 
    —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ. 

    :return: –°–ø–∏—Å–æ–∫, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. 

    """
    global ships_list
    enemy_ships = []

    # –ø–æ–¥—Å—á–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ–π –¥–ª–∏–Ω—ã –∫–æ—Ä–∞–±–ª–µ–π
    sum_1_all_ships = sum(ships_list)
    sum_1_enemy = 0

    while sum_1_enemy != sum_1_all_ships:
        # –æ–±–Ω—É–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∫–æ—Ä–∞–±–ª–µ–π –≤—Ä–∞–≥–∞
        enemy_ships = [[0 for i in range(size_x + 1)] for i in
                       # +1 –¥–ª—è –¥–æ–ø. –ª–∏–Ω–∏–∏ —Å–ø—Ä–∞–≤–∞ –∏ —Å–Ω–∏–∑—É, –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
                       range(size_y + 1)]

        for i in range(0, ships):
            len = ships_list[i]
            # 1- –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ 2 - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ
            horizont_vertikal = random.randrange(1, 3)

            primerno_x = random.randrange(0, size_x)
            if primerno_x + len > size_x:
                primerno_x = primerno_x - len

            primerno_y = random.randrange(0, size_y)
            if primerno_y + len > size_y:
                primerno_y = primerno_y - len

            if horizont_vertikal == 1:
                if primerno_x + len <= size_x:
                    for j in range(0, len):
                        try:
                            check_near_ships = 0
                            check_near_ships = enemy_ships[primerno_y][primerno_x - 1] + \
                                enemy_ships[primerno_y][primerno_x + j] + \
                                enemy_ships[primerno_y][primerno_x + j + 1] + \
                                enemy_ships[primerno_y + 1][primerno_x + j + 1] + \
                                enemy_ships[primerno_y - 1][primerno_x + j + 1] + \
                                enemy_ships[primerno_y + 1][primerno_x + j] + \
                                enemy_ships[primerno_y - 1][primerno_x + j]

                            if check_near_ships == 0:  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ —Ä—è–¥–æ–º
                                # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ—Ä–∞–±–ª—è
                                enemy_ships[primerno_y][primerno_x + j] = i + 1
                        except Exception:
                            pass
            if horizont_vertikal == 2:
                if primerno_y + len <= size_y:
                    for j in range(0, len):
                        try:
                            check_near_ships = 0
                            check_near_ships = enemy_ships[primerno_y - 1][primerno_x] + \
                                enemy_ships[primerno_y + j][primerno_x] + \
                                enemy_ships[primerno_y + j + 1][primerno_x] + \
                                enemy_ships[primerno_y + j + 1][primerno_x + 1] + \
                                enemy_ships[primerno_y + j + 1][primerno_x - 1] + \
                                enemy_ships[primerno_y + j][primerno_x + 1] + \
                                enemy_ships[primerno_y + j][primerno_x - 1]

                            if check_near_ships == 0:  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ —Ä—è–¥–æ–º
                                # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ—Ä–∞–±–ª—è
                                enemy_ships[primerno_y + j][primerno_x] = i + 1
                        except Exception:
                            pass

        # –¥–µ–ª–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –µ–¥–∏–Ω–∏—Ü (–ø–æ–¥–±–∏—Ç—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π)
        sum_1_enemy = 0
        for i in range(0, size_x):
            for j in range(0, size_y):
                if enemy_ships[j][i] > 0:
                    sum_1_enemy = sum_1_enemy + 1
    return enemy_ships


generate_ships_list()

enemy_ships1 = generate_enemy_ships()
enemy_ships2 = generate_enemy_ships()

while app_running:
    if app_running:
        tk.update_idletasks()
        tk.update()
    time.sleep(0.01)
